[{"C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\App.tsx":"1","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\components\\UpdateCV.tsx":"2","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\reportWebVitals.ts":"3","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\remote\\ServiceApi.ts":"4","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\pages\\MainPage.tsx":"5","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\components\\JobsList2.tsx":"6","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\pages\\LoginPage.tsx":"7","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\pages\\UpdateVCPage.tsx":"8","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\components\\CvList.tsx":"9"},{"size":651,"mtime":1608141129908,"results":"10","hashOfConfig":"11"},{"size":8217,"mtime":1610213014177,"results":"12","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":803,"mtime":1610217748445,"results":"14","hashOfConfig":"11"},{"size":7015,"mtime":1610220597594,"results":"15","hashOfConfig":"11"},{"size":1632,"mtime":1609947938729,"results":"16","hashOfConfig":"11"},{"size":1481,"mtime":1609348270043,"results":"17","hashOfConfig":"11"},{"size":2001,"mtime":1610209439372,"results":"18","hashOfConfig":"11"},{"size":1431,"mtime":1610209118627,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1svcw7f",{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\App.tsx",["43"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport LoginPage from '../src/pages/LoginPage';\r\nimport MainPage from '../src/pages/MainPage'\r\nimport UpdateCVPage from './pages/UpdateVCPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact={true} path=\"/\" component={LoginPage}></Route>\r\n        <Route exact={true} path=\"/home\" component={MainPage}></Route>\r\n        <Route exact={true} path=\"/updateCV\" component={UpdateCVPage}></Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\components\\UpdateCV.tsx",["44","45","46","47"],"C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\reportWebVitals.ts",[],"C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\remote\\ServiceApi.ts",[],"C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\pages\\MainPage.tsx",["48"],"import * as React from 'react';\r\nimport { withStyles, createStyles } from '@material-ui/core/styles';\r\nimport JobsList2 from '../../src/components/JobsList2'\r\nimport { Button, Card, Typography } from '@material-ui/core';\r\nimport ServiceApi from '../remote/ServiceApi';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport CvlistComponent from '../components/CvList'\r\nimport fs from 'fs';\r\n\r\n\r\nexport interface MainPageProps extends RouteComponentProps {\r\n    classes: any;\r\n}\r\n \r\nexport interface MainPageState {\r\n    jobsList: any;\r\n    cvList  : any;\r\n}\r\n\r\nconst styles = createStyles({\r\n\tcvCard: {\r\n        width:'230px',\r\n        height:'400px',\r\n    },\r\n    cardBaza:{\r\n        width:'230px',\r\n        height:'400px',\r\n        textAlign:'center',\r\n        display:'flex',\r\n        alignItems:'center',\r\n        flexDirection:'column',\r\n        justifyContent:'center'\r\n    },\r\n    buttonDescarca:{\r\n        width:'100px',\r\n        height:'100px'\r\n    },\r\n    cvListBox : {\r\n    },\r\n    pageBox : {\r\n        width:'70%',\r\n        display:'flex',\r\n        flexDirection:'row',\r\n        alignItems:'center',\r\n        marginTop:'90px',\r\n        justifyContent:'space-between'\r\n    },\r\n    container:{\r\n        width:'100%',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        alignItems:'center'\r\n    },\r\n    jobListBox:{\r\n    },\r\n    dbButtonBox:{\r\n    },\r\n    jobButtonBox:{\r\n        display:'flex',\r\n        width:'100%',\r\n        flexDirection:'row',\r\n        justifyContent:'space-evenly',\r\n    },\r\n    jobList:{\r\n        height:'90%'\r\n    }\r\n});\r\n\r\n\r\nclass MainPage extends React.Component<MainPageProps, MainPageState> {\r\n    private service:ServiceApi;\r\n    constructor(props:MainPageProps)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            jobsList:[],\r\n            cvList:[],\r\n        }\r\n       this.service = new ServiceApi();\r\n    }\r\n\r\n    async componentDidMount()\r\n    {\r\n        const jobs =await this.service.getJobs();\r\n        this.setState({\r\n            jobsList:jobs.data,\r\n        })\r\n    }\r\n\r\n    updateListJobs = (data:any)=>{\r\n        this.setState({\r\n            jobsList:data,\r\n        });\r\n    }\r\n\r\n    showCv = (id:any)=>{\r\n        console.log(id);\r\n        localStorage.setItem(\"idJob\",id);\r\n        this.props.history.push('/updateCV');\r\n    }\r\n\r\n    newCV = ()=>{\r\n        localStorage.setItem(\"idJob\",\"-1\");\r\n        this.props.history.push('/updateCV');\r\n    }\r\n\r\n    selectedCv = async (id: any)=>{\r\n        try{\r\n            const data =await this.service.getCv(id);\r\n            this.setState({\r\n                cvList:data.data,\r\n            })\r\n        }catch(err)\r\n        {\r\n            console.log(err);\r\n            this.setState({\r\n                cvList:[],\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    save= ()=>{\r\n        try{\r\n            \r\n\r\n        }catch(err)\r\n        {\r\n            alert(\"CV-ul nu a fost salvat\");\r\n        }\r\n    }\r\n\r\n\r\n    getXcel = async ()=>{\r\n        try{\r\n            const d = await this.service.getXcel({test:'asdasd'});\r\n            const data = d.data;\r\n            console.log(d);\r\n            //this.savee(\"d\",data,\"image/jpeg\",true)\r\n            const contentType = 'application/vnd.ms-excel';\r\n            const b64Data = data;\r\n            const blob = this.b64toBlob(b64Data, contentType);\r\n            const blobUrl = URL.createObjectURL(blob);\r\n            let anchor = document.createElement('a');\r\n\r\n            anchor.href = blobUrl;\r\n            anchor.download = \"dragos\";\r\n            anchor.click();\r\n      \r\n        URL.revokeObjectURL(blobUrl);\r\n\r\n        }catch(err)\r\n        {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n     b64toBlob = (b64Data:any, contentType:any='', sliceSize:any=512) => {\r\n        const byteCharacters = atob(b64Data);\r\n        const byteArrays = [];\r\n      \r\n        for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n          const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n      \r\n          const byteNumbers = new Array(slice.length);\r\n          for (let i = 0; i < slice.length; i++) {\r\n            byteNumbers[i] = slice.charCodeAt(i);\r\n          }\r\n      \r\n          const byteArray = new Uint8Array(byteNumbers);\r\n          byteArrays.push(byteArray);\r\n        }\r\n      \r\n        const blob = new Blob(byteArrays, {type: contentType});\r\n        return blob;\r\n      }\r\n\r\n\r\n    render() { \r\n        const {classes} = this.props\r\n        return (\r\n            <div className={classes.container}>\r\n                <div className={classes.pageBox}>\r\n                    <div className = {classes.cvListBox}>\r\n                        <Card className={classes.cvCard}>\r\n                            <div className={classes.jobList}>\r\n                                <JobsList2 select={this.selectedCv} updateJob={(e:any)=>console.log(e)} updateListJobs={this.updateListJobs} items={this.state.jobsList} />\r\n                            </div>\r\n                            \r\n                            <div className={classes.jobButtonBox}>\r\n                                <Button variant=\"contained\" color=\"primary\">\r\n                                    Primary\r\n                                </Button>\r\n\r\n                                <Button variant=\"contained\" color=\"secondary\">\r\n                                    Secondary\r\n                                </Button>\r\n                            </div>\r\n                        </Card>\r\n                    </div>\r\n                    <div className = {classes.cvListBox}>\r\n                        <Card className={classes.cvCard}>\r\n                            <div className={classes.jobList}>\r\n                                <CvlistComponent selectCv={this.showCv} items={this.state.cvList} /></div>\r\n                            \r\n                            <div className={classes.jobButtonBox}>\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={this.newCV}>\r\n                                    New CV\r\n                                </Button>\r\n\r\n                                <Button variant=\"contained\" color=\"secondary\">\r\n                                    Secondary\r\n                                </Button>\r\n                            </div>\r\n                        </Card>\r\n                    </div>\r\n                    <div className={classes.dbButtonBox}>\r\n                        <Card className={classes.cardBaza} >\r\n                            <Typography variant=\"h5\" component=\"h2\">\r\n                                Baza de date\r\n                            </Typography>\r\n\r\n                            <Button className={classes.buttonDescarca} variant=\"contained\" color=\"secondary\" onClick={this.getXcel}>\r\n                                DESCARCA\r\n                            </Button>\r\n                        </Card>\r\n                    </div>\r\n                </div>        \r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default withStyles(styles) (MainPage);","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\components\\JobsList2.tsx",["49"],"import * as React from 'react';\r\nimport { arrayMove, SortableContainer, SortableElement } from 'react-sortable-hoc';\r\nimport '../JobsList.css';\r\n\r\n\r\n\r\nexport interface JobListProps {\r\n  items: any;\r\n  updateListJobs: any;\r\n  select:any;\r\n  updateJob:any;\r\n}\r\n\r\nexport interface JobListState {\r\n  items:any;\r\n}\r\n\r\n\r\nclass JobsList2 extends React.Component<JobListProps, JobListState> {\r\n\r\n\r\n\r\n   SortableList = SortableContainer(({items}: {items: any[]}) => \r\n      <ul key={2} id={'ulList'}>\r\n        {items.map((value :any, index:any) => {\r\n          if (value != null)\r\n            return <this.SortableItem key={value.id} index={value.id} value={value.name} id={value.id}/>;\r\n        })}\r\n      </ul>);\r\n\r\n SortableItem = SortableElement(({value, id}: {value: string, id: number}) =>\r\n    <li key={id} onClick={(event:any)=>{\r\n      this.loadCv(event.target.id);\r\n    }}  id={''+id}  onDoubleClick={(event:any)=>{\r\n     this.props.updateJob(event.target.id)\r\n    }} value={value}><span>{id}</span>{value}</li>\r\n  );\r\n\r\n  loadCv = (c:any)=>{\r\n    this.props.select(c);\r\n  }\r\n\r\n  updateJob = (id:any)=>{\r\n\r\n  }\r\n\r\n  private onSortEnd = ({oldIndex, newIndex}: {oldIndex: number, newIndex: number}) => {\r\n    console.log(\"am intrat aici\");\r\n      let data = this.props.items;\r\n      data = arrayMove(data, oldIndex, newIndex);\r\n      this.props.updateListJobs(data);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n    <div className={'container'}>\r\n        <h2>Lista Posturi</h2>\r\n        <this.SortableList items={this.props.items} onSortEnd={this.onSortEnd} distance={1} lockAxis=\"y\"/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JobsList2;","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\pages\\LoginPage.tsx",[],"C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\pages\\UpdateVCPage.tsx",["50","51"],"import { Container } from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport { Component } from 'react';\r\nimport UpdateCV from '../components/UpdateCV';\r\nimport ServiceApi from '../remote/ServiceApi'\r\nexport interface UpdateCVPageProps {\r\n}\r\n \r\nexport interface UpdateCVPageState {\r\n    imgSrc:string;\r\n    varsta:string;\r\n    gen:string;\r\n    casatorit:string;\r\n    educatie:string;\r\n    munca:string;\r\n    nume:string;\r\n}\r\n \r\nclass UpdateCVPage extends React.Component<UpdateCVPageProps, UpdateCVPageState> {\r\n    private service:ServiceApi = new ServiceApi();\r\n    constructor(props:UpdateCVPageProps) {\r\n        super(props);\r\n        this.state = {\r\n            imgSrc:'',\r\n            varsta:'',\r\n            gen:'',\r\n            casatorit:'',\r\n            educatie:'',\r\n            munca:'',\r\n            nume:'',\r\n        }\r\n    }\r\n\r\n    async  componentDidMount(){\r\n        const id = localStorage.getItem('idJob');\r\n        if(id=== \"-1\")\r\n        {\r\n            this.setState({\r\n                imgSrc:\"\",\r\n                varsta:\"\",\r\n                educatie:\"\",\r\n                munca:\"\",\r\n                nume:\"\"\r\n            })\r\n            return;\r\n        }\r\n        let job;\r\n        try{\r\n            job =await this.service.getJobById(id);\r\n            job=job.data;\r\n        }catch(err)\r\n        {\r\n            console.log(err)\r\n        }\r\n        console.log(job);\r\n        this.setState({\r\n            imgSrc:job.photo_id,\r\n            varsta:job.age,\r\n            gen:job.sex,\r\n            educatie:job.education,\r\n            munca:job.professional,\r\n            nume:job.name,\r\n        })\r\n    }\r\n\r\n    handleChange = (data: any) => {\r\n        this.setState({\r\n            ...data,\r\n        });\r\n    };\r\n\r\n    render() { \r\n        return (\r\n            <div>\r\n                <UpdateCV \r\n                {...this.state}\r\n                handleChange={this.handleChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default UpdateCVPage;","C:\\D-drive-34937\\Repositories\\FE-Admin-HCI\\src\\components\\CvList.tsx",["52","53"],"import * as React from 'react';\r\nimport { arrayMove, SortableContainer, SortableElement } from 'react-sortable-hoc';\r\nimport '../JobsList.css';\r\n\r\nexport interface CvListProps {\r\n  items: any;\r\n  selectCv:any;\r\n}\r\n\r\nexport interface CVListState {\r\n  items:any;\r\n}\r\n\r\nclass JobsList2 extends React.Component<CvListProps, CVListState> {\r\n\r\n\r\n SortableList = SortableContainer(({items}: {items: any[]}) => \r\n  <ul key={2} id={'ulList'}>\r\n    {items.map((value :any, index:any) => {\r\n      if (value != null)\r\n        return <this.SortableItem key={value.id} index={value.id} value={value.name} id={value.id} order={index+1}/>;\r\n    })}\r\n  </ul>);\r\n  \r\n   SortableItem = SortableElement(({value, id , order}: {value: string, id: number , order:number}) =>\r\n    <li key={id} onDoubleClick={(e:any)=>{\r\n        console.log(e);\r\n        this.props.selectCv(e.target.id);\r\n      }\r\n    } id={''+id} value={value}> <span>{order}</span>{value}</li>\r\n  );\r\n\r\n  private onSortEnd = ({oldIndex, newIndex}: {oldIndex: number, newIndex: number}) => {\r\n    if(oldIndex !== newIndex)\r\n    {\r\n      let data = this.props.items;\r\n      data = arrayMove(data, oldIndex, newIndex);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n    <div className={'container'}>\r\n        <h2>Lista Cv-uri</h2>\r\n        <this.SortableList items={this.props.items} onSortEnd={this.onSortEnd} distance={1} lockAxis=\"y\"/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JobsList2;",{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"58","line":1,"column":42,"nodeType":"56","messageId":"57","endLine":1,"endColumn":51},{"ruleId":"54","severity":1,"message":"59","line":1,"column":145,"nodeType":"56","messageId":"57","endLine":1,"endColumn":156},{"ruleId":"54","severity":1,"message":"60","line":1,"column":158,"nodeType":"56","messageId":"57","endLine":1,"endColumn":168},{"ruleId":"54","severity":1,"message":"61","line":1,"column":170,"nodeType":"56","messageId":"57","endLine":1,"endColumn":184},{"ruleId":"54","severity":1,"message":"62","line":8,"column":8,"nodeType":"56","messageId":"57","endLine":8,"endColumn":10},{"ruleId":"63","severity":1,"message":"64","line":25,"column":44,"nodeType":"65","messageId":"66","endLine":25,"endColumn":46},{"ruleId":"54","severity":1,"message":"67","line":1,"column":10,"nodeType":"56","messageId":"57","endLine":1,"endColumn":19},{"ruleId":"54","severity":1,"message":"68","line":3,"column":10,"nodeType":"56","messageId":"57","endLine":3,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":19,"column":40,"nodeType":"65","messageId":"66","endLine":19,"endColumn":42},{"ruleId":"54","severity":1,"message":"69","line":37,"column":24,"nodeType":"56","messageId":"57","endLine":37,"endColumn":28},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'CardActionArea' is defined but never used.","'fs' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Container' is defined but never used.","'Component' is defined but never used.","'data' is assigned a value but never used."]